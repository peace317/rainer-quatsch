# Sample workflow for building and deploying a Next.js site to GitHub Pages
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: Build App

on:
    # Runs on pushes targeting the default branch
    push:
        branches: ['main']

    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
    contents: read
    pages: write
    id-token: write

jobs:
    # Build job
    build:
        timeout-minutes: 10
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'

            - name: Restore cache
              uses: actions/cache@v4
              with:
                  path: |
                      .next/cache
                  # Generate a new cache whenever packages or source files change.
                  key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
                  # If source files changed but packages didn't, rebuild from a prior cache.
                  restore-keys: |
                      ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

            - name: Install dependencies
              run: npm ci

            - name: Build with Next.js
              run: npx --no-install next build

            - name: Prepare TestDB
              uses: supercharge/mongodb-github-action@1.10.0
              with:
                  mongodb-version: '7.0'
                  mongodb-replica-set: test-rs
                  mongodb-db: test

            # Figures out the version of playwright that's installed.
            # 1. Because we don't know what version yarn will resolve it to, we have
            #    to use `yarn why` to get the actually installed version.
            # 2. Because we're in a workspace, we need to make sure we get the version
            #    for the root and not any children, hence the `grep`. If not using
            #    workspaces, this can be skipped.
            # 3. jq comes pre-installed in the Ubuntu runner, so we use that to get
            #    the correct version string.
            # 4. Finally, we use sed to extract just the version number (eg; '1.22.0')
            # The result is stored in steps.playwright-version.outputs.version
            - name: Get installed Playwright version
              id: playwright-version
              run: echo "version=$(npm ls @playwright/test --json | jq --raw-output '.dependencies["@playwright/test"].version')" >> $GITHUB_OUTPUT

            # Attempt to restore the correct Playwright browser binaries based on the
            # currently installed version of Playwright (The browser binary versions
            # may change with Playwright versions).
            # Note: Playwright's cache directory is hard coded because that's what it
            # says to do in the docs. There doesn't appear to be a command that prints
            # it out for us.
            - uses: actions/cache@v4
              id: playwright-cache
              with:
                  path: '~/.cache/ms-playwright'
                  key: '${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}'
                  # As a fallback, if the Playwright version has changed, try use the
                  # most recently cached version. There's a good chance that at least one
                  # of the browser binary versions haven't been updated, so Playwright can
                  # skip installing that in the next step.
                  # Note: When falling back to an old cache, `cache-hit` (used below)
                  # will be `false`. This allows us to restore the potentially out of
                  # date cache, but still let Playwright decide if it needs to download
                  # new binaries or not.
                  restore-keys: |
                      ${{ runner.os }}-playwright-

            - name: Install Playwright Browsers
              if: steps.playwright-cache.outputs.cache-hit != 'true'
              run: npx playwright install --with-deps

            - name: Run tests
              run: TEST_ENV=production npx playwright test

            - name: Upload Test artifact
              uses: actions/upload-artifact@v4
              if: ${{ !cancelled() }}
              with:
                  name: playwright-report
                  path: playwright-report/
                  retention-days: 4
